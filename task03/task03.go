package main

import (
	"fmt"
	"sync"
)

/*
	=== Задача №3 ===

	Дана последовательность чисел: 2,4,6,8,10. Найти сумму их квадратов(22+32+42….)
	с использованием конкурентных вычислений.

*/

func first() {
	// Заданная последовательность
	arr := [5]int{2, 4, 6, 8, 10}
	// Инициализация канала для передачи вычислений
	rChan := make(chan int, len(arr))

	// Объявление переменной типа sync.WaitGroup
	var wg sync.WaitGroup

	// Цикл по элементам последовательности
	for _, v := range arr {
		// Увеличения счетчика горутин в переменной wg
		wg.Add(1)
		// Запуск горутины
		go func(v int, wg *sync.WaitGroup, rChan chan<- int) {
			// Уменьшение счетчика горутин перед выходом из функции
			defer wg.Done()
			// Передача результата в канал
			rChan <- v * v
		}(v, &wg, rChan)
	}

	// Ожидание завершания работы всех горутин
	wg.Wait()
	// Закрытие канала
	close(rChan)

	// Инициализация переменной sm нулем
	sm := 0
	// Цикл по значениям, полученным каналом rChan
	for value := range rChan {
		// Увеличение переменной sm на значение value
		sm += value
	}
	// Вывод значения переменной sm в консоль
	fmt.Println(sm)
}

func second() {
	// Заданная последовательность
	arr := [5]int{2, 4, 6, 8, 10}
	// Инициализация переменной sm нулем
	sm := 0

	// Объявление переменной типа sync.WaitGroup
	var wg sync.WaitGroup
	// Объявление переменной типа sync.Mutex
	var mu sync.Mutex

	// Цикл по элементам последовательности
	for _, v := range arr {
		// Увеличения счетчика горутин в переменной wg
		wg.Add(1)
		// Запуск горутины
		go func(v int, wg *sync.WaitGroup, sm *int, mu *sync.Mutex) {
			// Блокировка мьютекса
			mu.Lock()
			// Перед выходом из функции
			defer func() {
				// Уменьшение счетчика горутин
				wg.Done()
				// Разблокировка мьютекса
				mu.Unlock()
			}()
			// Увеличение переменной sm на значение квадрата полученного числа
			*sm += v * v

		}(v, &wg, &sm, &mu)
	}

	// Ожидание завершания работы всех горутин
	wg.Wait()

	// Вывод значения переменной sm в консоль
	fmt.Println(sm)
}

func main() {
	first()
	// second()
}
